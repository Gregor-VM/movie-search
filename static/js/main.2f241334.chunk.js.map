{"version":3,"sources":["context/MovieContext.js","components/Spinner.js","components/SimpleMovie.js","components/ResultsBox.js","components/SearchBar.js","components/ShowBar.js","components/Layout.js","context/MovieReducer.js","context/MovieState.js","App.js","reportWebVitals.js","index.js"],"names":["MovieContext","createContext","Spinner","className","role","SimpleMovie","movie","Title","Poster","Year","imdbID","useContext","setMovie","selectedMovie","onClick","src","alt","ResultsBox","isSearching","movies","map","SearchBar","useState","textInput","setTextInput","setIsSearching","centralize","setCentralize","error","setError","searchRef","useRef","getMovies","memoizeSetCentralize","useCallback","handleSearchForm","e","a","preventDefault","console","useEffect","current","focus","onSubmit","ref","placeholder","type","value","onChange","target","ShowBar","isLoading","setIsLoading","rate","setRate","messageRef","scrollIntoView","behavior","block","setTimeout","Math","round","imdbRating","getMovieSelectedMemoize","id","axios","get","res","data","undefined","width","height","Plot","Released","Director","Actors","split","actor","class","genre","style","transitionDuration","transitionProperty","aria-valuenow","aria-valuemin","aria-valuemax","Layout","children","reducer","state","action","payload","seletedMovie","MovieState","useReducer","dispatch","query","Search","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f241334.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nconst MovieContext = createContext();\r\n\r\n\r\nexport default MovieContext\r\n","export default function Spinner(){\r\n    return (\r\n    <div className=\"d-flex justify-content-center\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n    );\r\n}","import { useContext } from \"react\";\r\nimport MovieContext from \"../context/MovieContext\";\r\n\r\nfunction SimpleMovie({ movie: { Title, Poster, Year, imdbID } }) {\r\n  const { setMovie, selectedMovie } = useContext(MovieContext);\r\n\r\n  return (\r\n    <div\r\n      className={`card shadow-sm my-3 ${\r\n        selectedMovie === imdbID && \"bg-light boder border-primary\"\r\n      }`}\r\n      onClick={() => setMovie(imdbID)}\r\n    >\r\n      <div className=\"card-body p-0\">\r\n        <div className=\"row\">\r\n          <div className=\"col-4\">\r\n            <img\r\n              src={Poster}\r\n              className=\"img-fluid rounded-left\"\r\n              alt={Title}\r\n            ></img>\r\n          </div>\r\n          <div className=\"col-8 p-2\">\r\n            <h4>{Title}</h4>\r\n            <small className=\"text-muted\">{Year}</small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SimpleMovie;\r\n","import { useContext } from \"react\";\r\nimport MovieContext from \"../context/MovieContext\";\r\nimport Spinner from \"./Spinner\";\r\nimport SimpleMovie from \"./SimpleMovie\";\r\n\r\nexport default function ResultsBox({ isSearching }) {\r\n  const { movies } = useContext(MovieContext);\r\n  if (isSearching) {\r\n    return isSearching ? <Spinner /> : <></>;\r\n  }\r\n  if (movies) {\r\n    return movies.map((movie) => (\r\n      <SimpleMovie key={movie.imdbID} movie={movie} />\r\n    ));\r\n  }\r\n  return \"Not movies found\";\r\n}\r\n","import React, {\r\n  useEffect,\r\n  useContext,\r\n  useState,\r\n  useCallback,\r\n  useRef,\r\n} from \"react\";\r\nimport MovieContext from \"../context/MovieContext\";\r\nimport ResultsBox from \"./ResultsBox\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nfunction SearchBar() {\r\n  const [textInput, setTextInput] = useState(\"\");\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [centralize, setCentralize] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const searchRef = useRef();\r\n\r\n  const { getMovies } = useContext(MovieContext);\r\n\r\n  const handleTextInput = (e) => setTextInput(e.target.value);\r\n\r\n  const memoizeSetCentralize = useCallback(() => {\r\n    setCentralize(false);\r\n  }, [setCentralize]);\r\n\r\n  const handleSearchForm = async (e) => {\r\n    e.preventDefault();\r\n    if (textInput === \"\") {\r\n      return setError(\"Empty Input\");\r\n    }\r\n    setIsSearching(true);\r\n    try {\r\n      const res = await getMovies(textInput);\r\n      !res ? setError(\"Movie not found\") : memoizeSetCentralize();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    setIsSearching(false);\r\n  };\r\n\r\n  useEffect(() => searchRef.current.focus(), []);\r\n\r\n  return (\r\n    <div className={centralize ? \"col-lg-12 mt-5\" : \"col-lg-4\"}>\r\n      {centralize && (\r\n        <h1 className=\"display-1 text-center mb-3\">Movie Search</h1>\r\n      )}\r\n      <form\r\n        className=\"form-group d-flex mb-lg-1 mb-3\"\r\n        onSubmit={handleSearchForm}\r\n      >\r\n        <input\r\n          ref={searchRef}\r\n          placeholder=\"Search a movie...\"\r\n          type=\"search\"\r\n          className=\"form-control rounded-0 shadow-none\"\r\n          value={textInput}\r\n          onChange={handleTextInput}\r\n        ></input>\r\n        <input\r\n          type=\"submit\"\r\n          className=\"btn btn-primary rounded-0 border-0 shadow-none\"\r\n          value=\"Search\"\r\n        ></input>\r\n      </form>\r\n      {!centralize && (\r\n        <div className=\"scroll\">\r\n          <ResultsBox isSearching={isSearching} />\r\n        </div>\r\n      )}\r\n      {centralize && isSearching && <Spinner></Spinner>}\r\n      {centralize && error && !isSearching && (\r\n        <div className=\"alert alert-danger\">{error}</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, {\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n} from \"react\";\r\nimport MovieContext from \"../context/MovieContext\";\r\nimport axios from \"axios\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nfunction ShowBar() {\r\n  const [movie, setMovie] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [rate, setRate] = useState(0);\r\n  const { selectedMovie } = useContext(MovieContext);\r\n\r\n  const messageRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (messageRef.current) {\r\n      messageRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n      });\r\n    }\r\n  }, [selectedMovie]);\r\n\r\n  //const rate = Math.round((movie.imdbRating/10)*100);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => setRate(Math.round((movie.imdbRating / 10) * 100), 100));\r\n  }, [movie]);\r\n\r\n  const getMovieSelectedMemoize = useCallback(\r\n    async (id) => {\r\n      if (selectedMovie) {\r\n        const res = await axios.get(\r\n          `https://www.omdbapi.com/?apikey=66ce2ccf&i=${id}`\r\n        );\r\n        setMovie(res.data);\r\n        setIsLoading(false);\r\n      }\r\n    },\r\n    [selectedMovie]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (selectedMovie) {\r\n      setIsLoading(true);\r\n    }\r\n    getMovieSelectedMemoize(selectedMovie);\r\n  }, [selectedMovie, getMovieSelectedMemoize]);\r\n\r\n  if (!isLoading) {\r\n    if (movie?.Title !== undefined) {\r\n      return (\r\n        <div className=\"col-lg-8 center-class\" ref={messageRef}>\r\n          <div className=\"card shadow mt-5 mt-md-0\">\r\n            <div className=\"card-body d-flex p-0\">\r\n              <img\r\n                src={movie.Poster}\r\n                alt={movie.Title}\r\n                className=\"rounded-left d-lg-inline-block d-none\"\r\n              />\r\n              <div className=\"d-flex flex-column p-3\">\r\n                <h4 className=\"border-bottom pb-2 border-info text-center\">\r\n                  {movie.Title}\r\n                </h4>\r\n                <img\r\n                  className=\"d-block d-lg-none mx-auto my-1\"\r\n                  src={movie.Poster}\r\n                  alt={movie.Title}\r\n                  width={200}\r\n                  height={200}\r\n                ></img>\r\n                <p>{movie.Plot}</p>\r\n                <small className=\"d-flex flex-column\">\r\n                  <p>\r\n                    <b className=\"text-info\">Released: </b>\r\n                    {movie.Released}\r\n                  </p>\r\n                  <p>\r\n                    <b className=\"text-info\">Director: </b>\r\n                    {movie.Director}\r\n                  </p>\r\n                </small>\r\n\r\n                <p>\r\n                  <b>Actores: </b>\r\n                  {movie.Actors.split(\", \").map((actor) => {\r\n                    return <span class=\"badge badge-info mr-1\">{actor}</span>;\r\n                  })}\r\n                </p>\r\n\r\n                <p>\r\n                  <b>Genre: </b>\r\n                  {movie.Actors.split(\", \").map((genre) => {\r\n                    return <span class=\"badge badge-info mr-1\">{genre}</span>;\r\n                  })}\r\n                </p>\r\n                <p class=\"text-muted\">\r\n                  <b>IMDB - Rating:</b>\r\n                </p>\r\n                <div className=\"progress\">\r\n                  <div\r\n                    className=\"progress-bar\"\r\n                    role=\"progressbar\"\r\n                    style={{\r\n                      width: rate + \"%\",\r\n                      transitionDuration: 1,\r\n                      transitionProperty: \"all\",\r\n                    }}\r\n                    aria-valuenow=\"25\"\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax=\"100\"\r\n                  >{`${rate}%`}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <></>;\r\n    }\r\n  } else {\r\n    return (\r\n      <div className=\"col-lg-8 center-class d-flex justify-content-center w-100\">\r\n        <Spinner />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowBar;\r\n","import React from 'react'\r\n\r\nfunction Layout({children}) {\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row mt-3\">\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Layout\r\n","function reducer(state, action) {\r\n    const {type, payload} = action;\r\n    switch(type){\r\n        case 'GET_MOVIES':\r\n            return {movies: payload, seletedMovie:null}\r\n        case 'SET_MOVIE':\r\n            return {...state, selectedMovie: payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import React, { useReducer } from \"react\";\r\nimport MovieContext from \"./MovieContext\";\r\nimport reducer from \"./MovieReducer\";\r\nimport axios from \"axios\";\r\n\r\nfunction MovieState({ children }) {\r\n  const init = { movies: [], selectedMovie: null };\r\n\r\n  const [state, dispatch] = useReducer(reducer, init);\r\n\r\n  const getMovies = async (query) => {\r\n    const res = await axios.get(\r\n      `https://www.omdbapi.com/?apikey=66ce2ccf&s=${query}`\r\n    );\r\n    dispatch({ type: \"GET_MOVIES\", payload: res.data.Search });\r\n    return res.data.Search;\r\n  };\r\n\r\n  const setMovie = (id) => {\r\n    dispatch({ type: \"SET_MOVIE\", payload: id });\r\n  };\r\n\r\n  return (\r\n    <MovieContext.Provider value={{ ...state, getMovies, setMovie }}>\r\n      {children}\r\n    </MovieContext.Provider>\r\n  );\r\n}\r\n\r\nexport default MovieState;\r\n","import React from 'react';\nimport './Global.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SearchBar from './components/SearchBar';\nimport ShowBar from './components/ShowBar';\nimport Layout from './components/Layout';\nimport MovieState from './context/MovieState'\n\n\nfunction App() {\n  return (\n    <>\n      <MovieState>\n        <Layout>\n          <SearchBar />\n          <ShowBar />\n        </Layout>\n      </MovieState>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}